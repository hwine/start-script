#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
tmp: helper function to quickly make file types defined in the config file

by default, the config file is located here: ~/.config/tmp/tmp.yml

kinds:
    some-python-script:
        chmod: 775
        suffix: py
        content: |
            #!/usr/bin/env python3
            # -*- coding: utf-8 -*-
            print('hello world')
'''

import os
import re
import subprocess
import sys
sys.dont_write_bytecode = True
from ruamel import yaml
from argparse import ArgumentParser, RawDescriptionHelpFormatter

SCRIPT_FILE = os.path.abspath(__file__)
SCRIPT_NAME = os.path.basename(SCRIPT_FILE)
SCRIPT_PATH = os.path.dirname(SCRIPT_FILE)
if os.path.islink(__file__):
    REAL_FILE = os.path.abspath(os.readlink(__file__))
    REAL_NAME = os.path.basename(REAL_FILE)
    REAL_PATH = os.path.dirname(REAL_FILE)

NAME, EXT = os.path.splitext(SCRIPT_NAME)

def interpolate(kinds, templates):
    def visit(body):
        return dict(
            chmod=body.get('chmod', 664),
            suffix=body.get('suffix', 'unknown'),
            content=body['content'].format(**templates))
    return {kind: visit(body) for kind, body in kinds.items()}

class ConfigFileNotFoundError(FileNotFoundError):
    pass

def parse_args(args):
    parser = ArgumentParser(
        description=__doc__,
        formatter_class=RawDescriptionHelpFormatter,
        add_help=False)
    parser.add_argument(
        '--config',
        metavar='FILEPATH',
        default='~/.config/{NAME}/{NAME}.yml'.format(**globals()),
        help='default="%(default)s"; config filepath')
    parser.add_argument(
        '-C', '--edit-config',
        action='store_true',
        help='edit config file')
    parser.add_argument(
        '-e', '--edit',
        action='store_true',
        help='edit script file')
    ns, rem = parser.parse_known_args()
    try:
        config = yaml.safe_load(open(os.path.expanduser(ns.config)))
    except FileNotFoundError as er:
        raise ConfigFileNotFoundError

    kinds = interpolate(config['kinds'], config['templates'])
    if ns.edit_config:
        # if we're editing, nothing else matters
        return ns, kinds
    parser = ArgumentParser(
        parents=[parser])
    #parser.set_defaults(**config)
    parser.add_argument(
        '-N', '--nerf',
        action='store_true',
        help='only print contents of the file to made')
    parser.add_argument(
        '-r', '--rm',
        action='store_true',
        help='delete filename')
    parser.add_argument(
        '-c', '--chmod',
        help='set the value to chmod the file to')
    parser.add_argument(
        'kind',
        choices=kinds.keys(),
        help='choose which kind of tmp file')
    parser.add_argument(
        'name',
        nargs='?',
        help='default="tmp"; optionally name the script')

    # don't interpret --edit as short for --edit-config
    ns = parser.parse_args(args)
    # I know there's a builtin way, but...
    if ns.edit and (ns.nerf or ns.rm):
        parser.error("--edit option incompatible with other options")
    return ns, kinds

def edit_file(path):
    editor_app = os.getenv('VISUAL', os.getenv('EDITOR', 'vi'))
    result = subprocess.run([editor_app, path])
    if result.returncode != 0:
        raise SystemExit(result.returncode)

def main(args):
    exitcode = 0
    ns, kinds = parse_args(args)
    if ns.edit_config:
        edit_file(ns.config)
        import pdb; pdb.set_trace()
        if not hasattr(ns, 'kind'):  # nothing more to do
            return

    kind = kinds[ns.kind]
    filename = ns.name
    if filename == None:
        filename = 'tmp.' + kind['suffix']

    if ns.nerf:
        print(kind)
    elif ns.rm:
        os.remove(filename)
    else:
        with open(filename, 'w') as f:
            f.write(kind['content'])
        chmod = ns.chmod if ns.chmod else kind['chmod']
        os.chmod(filename, int(str(chmod), 8))
        if ns.edit:
            edit_file(filename)

if __name__ == '__main__':
    main(sys.argv[1:])
